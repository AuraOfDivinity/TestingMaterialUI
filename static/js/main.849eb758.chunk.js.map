{"version":3,"sources":["logo.svg","components/Navbar.js","components/EmployeeCard.js","components/EmployeeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","AppBar","position","Toolbar","EmployeeCard","contentful","space","accessToken","props","employee","Card","CardMedia","style","height","image","fields","photo","file","url","title","CardContent","Typography","variant","color","component","client","EmployeeList","state","employees","searchString","getEmployees","getEntries","content_type","then","response","setState","items","catch","error","console","log","onSearchInputChange","event","target","value","this","TextField","padding","id","placeholder","margin","onChange","Grid","container","spacing","map","currentEmployee","item","xs","sm","lg","xl","Component","require","App","Paper","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,mICe5BC,EAVA,WACb,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,S,sGC0BOC,GA1BAC,eAAwB,CACrCC,MAAO,eACPC,YAAa,gDAGM,SAAAC,GACnB,OACE,6BACGA,EAAMC,SACL,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,OAAQ,KACjBC,MAAON,EAAMC,SAASM,OAAOC,MAAMD,OAAOE,KAAKC,IAC/CC,MAAM,gBAER,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,KACzDhB,EAAMC,SAASM,OAAOI,SAI3B,QCxBJM,EAASpB,eAAwB,CACrCC,MAAO,eACPC,YAAa,gDAuEAmB,E,YA9Db,aAAe,IAAD,8BACZ,+CANFC,MAAQ,CACNC,UAAW,GACXC,aAAc,IAGF,EAKdC,aAAe,WACbL,EACGM,WAAW,CACVC,aAAc,UAEfC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZP,UAAWM,EAASE,WAGvBC,OAAM,SAAAC,GACLC,QAAQC,IAAI,0CAhBJ,EAoBdC,oBAAsB,SAAAC,GAChBA,EAAMC,OAAOC,MACf,EAAKT,SAAS,CACZN,aAAca,EAAMC,OAAOC,QAG7B,EAAKT,SAAS,CACZN,aAAc,KAGlB,EAAKC,eACLS,QAAQC,IAAI,EAAKb,MAAMC,YA7BvB,EAAKE,eAFO,E,sEAmCZ,OACE,6BACGe,KAAKlB,MAAMC,UACV,6BACE,kBAACkB,EAAA,EAAD,CACElC,MAAO,CAAEmC,QAAS,IAClBC,GAAG,cACHC,YAAY,0BACZC,OAAO,SACPC,SAAUN,KAAKJ,sBAEjB,kBAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAG1C,MAAO,CAAEmC,QAAS,KAC3CF,KAAKlB,MAAMC,UAAU2B,KAAI,SAAAC,GAAe,OACvC,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrC,kBAAC,EAAD,CAAcpD,SAAU+C,UAMhC,yB,GA7DiBM,a,iBCFRC,EAAQ,IA4BZC,MA1Bf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,6BACE,kBAACZ,EAAA,EAAD,CAAMC,WAAS,EAACK,GAAI,GAAIJ,QAAS,EAAG1C,MAAO,CAAEmC,QAAS,SACpD,kBAACK,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAACO,EAAA,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAACb,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAACO,EAAA,EAAD,CACErD,MAAO,CACLsD,UAAW,WAFf,oBCXQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,iB","file":"static/js/main.849eb758.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\">\r\n        <Toolbar></Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport * as contentful from \"contentful\";\r\n\r\nconst client = contentful.createClient({\r\n  space: \"g0omatv81ux3\",\r\n  accessToken: \"9Ulv6nTh08-nO_1Mu1pEoOrjVB2YxCV7mDBNE8UyXt0\"\r\n});\r\n\r\nconst EmployeeCard = props => {\r\n  return (\r\n    <div>\r\n      {props.employee ? (\r\n        <Card>\r\n          <CardMedia\r\n            style={{ height: 140 }}\r\n            image={props.employee.fields.photo.fields.file.url}\r\n            title=\"Paella dish\"\r\n          />\r\n          <CardContent>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              {props.employee.fields.title}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeCard;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport EmployeeCard from \"./EmployeeCard.js\";\r\nimport * as contentful from \"contentful\";\r\n\r\nconst client = contentful.createClient({\r\n  space: \"g0omatv81ux3\",\r\n  accessToken: \"9Ulv6nTh08-nO_1Mu1pEoOrjVB2YxCV7mDBNE8UyXt0\"\r\n});\r\n\r\nclass EmployeeList extends Component {\r\n  state = {\r\n    employees: [],\r\n    searchString: \"\"\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.getEmployees();\r\n  }\r\n\r\n  getEmployees = () => {\r\n    client\r\n      .getEntries({\r\n        content_type: \"image\"\r\n      })\r\n      .then(response => {\r\n        this.setState({\r\n          employees: response.items\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error occured while fetching data!\");\r\n      });\r\n  };\r\n\r\n  onSearchInputChange = event => {\r\n    if (event.target.value) {\r\n      this.setState({\r\n        searchString: event.target.value\r\n      });\r\n    } else {\r\n      this.setState({\r\n        searchString: \"\"\r\n      });\r\n    }\r\n    this.getEmployees();\r\n    console.log(this.state.employees);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.employees ? (\r\n          <div>\r\n            <TextField\r\n              style={{ padding: 24 }}\r\n              id=\"searchInput\"\r\n              placeholder=\"Enter search term here!\"\r\n              margin=\"normal\"\r\n              onChange={this.onSearchInputChange}\r\n            ></TextField>\r\n            <Grid container spacing={2} style={{ padding: 24 }}>\r\n              {this.state.employees.map(currentEmployee => (\r\n                <Grid item xs={12} sm={12} lg={12} xl={12}>\r\n                  <EmployeeCard employee={currentEmployee}></EmployeeCard>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </div>\r\n        ) : (\r\n          \"No courses found!\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeList;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport NavBar from \"./components/Navbar.js\";\nimport EmployeeList from \"./components/EmployeeList.js\";\nimport \"./App.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst contentful = require(\"contentful\");\n\nfunction App() {\n  return (\n    <div>\n      <NavBar></NavBar>\n      <div>\n        <Grid container xs={12} spacing={5} style={{ padding: \"30px\" }}>\n          <Grid item xs={6}>\n            <Paper>\n              <EmployeeList />\n            </Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Paper\n              style={{\n                textAlign: \"center\"\n              }}\n            >\n              Hello world\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}